// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testApplications(t *testing.T) {
	t.Parallel()

	query := Applications()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testApplicationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Applications().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApplicationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ApplicationExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Application exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ApplicationExists to return true, but got false.")
	}
}

func testApplicationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	applicationFound, err := FindApplication(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if applicationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testApplicationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Applications().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testApplicationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Applications().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testApplicationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationOne := &Application{}
	applicationTwo := &Application{}
	if err = randomize.Struct(seed, applicationOne, applicationDBTypes, false, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}
	if err = randomize.Struct(seed, applicationTwo, applicationDBTypes, false, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = applicationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = applicationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Applications().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testApplicationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	applicationOne := &Application{}
	applicationTwo := &Application{}
	if err = randomize.Struct(seed, applicationOne, applicationDBTypes, false, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}
	if err = randomize.Struct(seed, applicationTwo, applicationDBTypes, false, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = applicationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = applicationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func applicationBeforeInsertHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationAfterInsertHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationAfterSelectHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationBeforeUpdateHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationAfterUpdateHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationBeforeDeleteHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationAfterDeleteHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationBeforeUpsertHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func applicationAfterUpsertHook(e boil.Executor, o *Application) error {
	*o = Application{}
	return nil
}

func testApplicationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Application{}
	o := &Application{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, applicationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Application object: %s", err)
	}

	AddApplicationHook(boil.BeforeInsertHook, applicationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	applicationBeforeInsertHooks = []ApplicationHook{}

	AddApplicationHook(boil.AfterInsertHook, applicationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	applicationAfterInsertHooks = []ApplicationHook{}

	AddApplicationHook(boil.AfterSelectHook, applicationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	applicationAfterSelectHooks = []ApplicationHook{}

	AddApplicationHook(boil.BeforeUpdateHook, applicationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	applicationBeforeUpdateHooks = []ApplicationHook{}

	AddApplicationHook(boil.AfterUpdateHook, applicationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	applicationAfterUpdateHooks = []ApplicationHook{}

	AddApplicationHook(boil.BeforeDeleteHook, applicationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	applicationBeforeDeleteHooks = []ApplicationHook{}

	AddApplicationHook(boil.AfterDeleteHook, applicationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	applicationAfterDeleteHooks = []ApplicationHook{}

	AddApplicationHook(boil.BeforeUpsertHook, applicationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	applicationBeforeUpsertHooks = []ApplicationHook{}

	AddApplicationHook(boil.AfterUpsertHook, applicationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	applicationAfterUpsertHooks = []ApplicationHook{}
}

func testApplicationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(applicationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicationToManyAppBindings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Application
	var b, c Binding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppID = a.Name
	c.AppID = a.Name

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AppBindings().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppID == b.AppID {
			bFound = true
		}
		if v.AppID == c.AppID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ApplicationSlice{&a}
	if err = a.L.LoadAppBindings(tx, false, (*[]*Application)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AppBindings = nil
	if err = a.L.LoadAppBindings(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppBindings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testApplicationToManyAppUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Application
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AppID = a.Name
	c.AppID = a.Name

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AppUsers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AppID == b.AppID {
			bFound = true
		}
		if v.AppID == c.AppID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ApplicationSlice{&a}
	if err = a.L.LoadAppUsers(tx, false, (*[]*Application)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AppUsers = nil
	if err = a.L.LoadAppUsers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AppUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testApplicationToManyAddOpAppBindings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Application
	var b, c, d, e Binding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicationDBTypes, false, strmangle.SetComplement(applicationPrimaryKeyColumns, applicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Binding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bindingDBTypes, false, strmangle.SetComplement(bindingPrimaryKeyColumns, bindingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Binding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppBindings(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Name != first.AppID {
			t.Error("foreign key was wrong value", a.Name, first.AppID)
		}
		if a.Name != second.AppID {
			t.Error("foreign key was wrong value", a.Name, second.AppID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AppBindings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AppBindings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AppBindings().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testApplicationToManyAddOpAppUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Application
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, applicationDBTypes, false, strmangle.SetComplement(applicationPrimaryKeyColumns, applicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppUsers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Name != first.AppID {
			t.Error("foreign key was wrong value", a.Name, first.AppID)
		}
		if a.Name != second.AppID {
			t.Error("foreign key was wrong value", a.Name, second.AppID)
		}

		if first.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.App != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AppUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AppUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AppUsers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testApplicationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testApplicationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ApplicationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testApplicationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Applications().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	applicationDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `Name`: `varchar`, `Webhook`: `varchar`, `DefaultRole`: `int`, `I18nApplicationName`: `json`, `GoogleLogin`: `json`, `WechatLogin`: `json`, `AppleLogin`: `json`}
	_                  = bytes.MinRead
)

func testApplicationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(applicationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(applicationAllColumns) == len(applicationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testApplicationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(applicationAllColumns) == len(applicationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Application{}
	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, applicationDBTypes, true, applicationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(applicationAllColumns, applicationPrimaryKeyColumns) {
		fields = applicationAllColumns
	} else {
		fields = strmangle.SetComplement(
			applicationAllColumns,
			applicationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ApplicationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testApplicationsUpsert(t *testing.T) {
	t.Parallel()

	if len(applicationAllColumns) == len(applicationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLApplicationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Application{}
	if err = randomize.Struct(seed, &o, applicationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Application: %s", err)
	}

	count, err := Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, applicationDBTypes, false, applicationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Application: %s", err)
	}

	count, err = Applications().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
