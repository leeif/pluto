// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Binding is an object representing the database table.
type Binding struct {
	ID            uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	LoginType     string    `boil:"login_type" json:"login_type" toml:"login_type" yaml:"login_type"`
	IdentifyToken string    `boil:"identify_token" json:"identify_token" toml:"identify_token" yaml:"identify_token"`
	Mail          string    `boil:"mail" json:"mail" toml:"mail" yaml:"mail"`
	Verified      null.Bool `boil:"verified" json:"verified,omitempty" toml:"verified" yaml:"verified,omitempty"`
	UserID        uint      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AppID         string    `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`

	R *bindingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bindingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BindingColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	LoginType     string
	IdentifyToken string
	Mail          string
	Verified      string
	UserID        string
	AppID         string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	LoginType:     "login_type",
	IdentifyToken: "identify_token",
	Mail:          "mail",
	Verified:      "verified",
	UserID:        "user_id",
	AppID:         "app_id",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BindingWhere = struct {
	ID            whereHelperuint
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
	LoginType     whereHelperstring
	IdentifyToken whereHelperstring
	Mail          whereHelperstring
	Verified      whereHelpernull_Bool
	UserID        whereHelperuint
	AppID         whereHelperstring
}{
	ID:            whereHelperuint{field: "`bindings`.`id`"},
	CreatedAt:     whereHelpernull_Time{field: "`bindings`.`created_at`"},
	UpdatedAt:     whereHelpernull_Time{field: "`bindings`.`updated_at`"},
	DeletedAt:     whereHelpernull_Time{field: "`bindings`.`deleted_at`"},
	LoginType:     whereHelperstring{field: "`bindings`.`login_type`"},
	IdentifyToken: whereHelperstring{field: "`bindings`.`identify_token`"},
	Mail:          whereHelperstring{field: "`bindings`.`mail`"},
	Verified:      whereHelpernull_Bool{field: "`bindings`.`verified`"},
	UserID:        whereHelperuint{field: "`bindings`.`user_id`"},
	AppID:         whereHelperstring{field: "`bindings`.`app_id`"},
}

// BindingRels is where relationship names are stored.
var BindingRels = struct {
	App string
}{
	App: "App",
}

// bindingR is where relationships are stored.
type bindingR struct {
	App *Application
}

// NewStruct creates a new relationship struct
func (*bindingR) NewStruct() *bindingR {
	return &bindingR{}
}

// bindingL is where Load methods for each relationship are stored.
type bindingL struct{}

var (
	bindingAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "login_type", "identify_token", "mail", "verified", "user_id", "app_id"}
	bindingColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "login_type", "identify_token", "mail", "verified", "user_id"}
	bindingColumnsWithDefault    = []string{"id", "app_id"}
	bindingPrimaryKeyColumns     = []string{"id"}
)

type (
	// BindingSlice is an alias for a slice of pointers to Binding.
	// This should generally be used opposed to []Binding.
	BindingSlice []*Binding
	// BindingHook is the signature for custom Binding hook methods
	BindingHook func(boil.Executor, *Binding) error

	bindingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bindingType                 = reflect.TypeOf(&Binding{})
	bindingMapping              = queries.MakeStructMapping(bindingType)
	bindingPrimaryKeyMapping, _ = queries.BindMapping(bindingType, bindingMapping, bindingPrimaryKeyColumns)
	bindingInsertCacheMut       sync.RWMutex
	bindingInsertCache          = make(map[string]insertCache)
	bindingUpdateCacheMut       sync.RWMutex
	bindingUpdateCache          = make(map[string]updateCache)
	bindingUpsertCacheMut       sync.RWMutex
	bindingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bindingBeforeInsertHooks []BindingHook
var bindingBeforeUpdateHooks []BindingHook
var bindingBeforeDeleteHooks []BindingHook
var bindingBeforeUpsertHooks []BindingHook

var bindingAfterInsertHooks []BindingHook
var bindingAfterSelectHooks []BindingHook
var bindingAfterUpdateHooks []BindingHook
var bindingAfterDeleteHooks []BindingHook
var bindingAfterUpsertHooks []BindingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Binding) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Binding) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Binding) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Binding) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Binding) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Binding) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Binding) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Binding) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Binding) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bindingAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBindingHook registers your hook function for all future operations.
func AddBindingHook(hookPoint boil.HookPoint, bindingHook BindingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bindingBeforeInsertHooks = append(bindingBeforeInsertHooks, bindingHook)
	case boil.BeforeUpdateHook:
		bindingBeforeUpdateHooks = append(bindingBeforeUpdateHooks, bindingHook)
	case boil.BeforeDeleteHook:
		bindingBeforeDeleteHooks = append(bindingBeforeDeleteHooks, bindingHook)
	case boil.BeforeUpsertHook:
		bindingBeforeUpsertHooks = append(bindingBeforeUpsertHooks, bindingHook)
	case boil.AfterInsertHook:
		bindingAfterInsertHooks = append(bindingAfterInsertHooks, bindingHook)
	case boil.AfterSelectHook:
		bindingAfterSelectHooks = append(bindingAfterSelectHooks, bindingHook)
	case boil.AfterUpdateHook:
		bindingAfterUpdateHooks = append(bindingAfterUpdateHooks, bindingHook)
	case boil.AfterDeleteHook:
		bindingAfterDeleteHooks = append(bindingAfterDeleteHooks, bindingHook)
	case boil.AfterUpsertHook:
		bindingAfterUpsertHooks = append(bindingAfterUpsertHooks, bindingHook)
	}
}

// One returns a single binding record from the query.
func (q bindingQuery) One(exec boil.Executor) (*Binding, error) {
	o := &Binding{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bindings")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Binding records from the query.
func (q bindingQuery) All(exec boil.Executor) (BindingSlice, error) {
	var o []*Binding

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Binding slice")
	}

	if len(bindingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Binding records in the query.
func (q bindingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bindings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bindingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bindings exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (o *Binding) App(mods ...qm.QueryMod) applicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`name` = ?", o.AppID),
	}

	queryMods = append(queryMods, mods...)

	query := Applications(queryMods...)
	queries.SetFrom(query.Query, "`applications`")

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bindingL) LoadApp(e boil.Executor, singular bool, maybeBinding interface{}, mods queries.Applicator) error {
	var slice []*Binding
	var object *Binding

	if singular {
		object = maybeBinding.(*Binding)
	} else {
		slice = *maybeBinding.(*[]*Binding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bindingR{}
		}
		args = append(args, object.AppID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bindingR{}
			}

			for _, a := range args {
				if a == obj.AppID {
					continue Outer
				}
			}

			args = append(args, obj.AppID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`applications`), qm.WhereIn(`applications.name in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Application")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Application")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(bindingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &applicationR{}
		}
		foreign.R.AppBindings = append(foreign.R.AppBindings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AppID == foreign.Name {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.AppBindings = append(foreign.R.AppBindings, local)
				break
			}
		}
	}

	return nil
}

// SetApp of the binding to the related item.
// Sets o.R.App to related.
// Adds o to related.R.AppBindings.
func (o *Binding) SetApp(exec boil.Executor, insert bool, related *Application) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `bindings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"app_id"}),
		strmangle.WhereClause("`", "`", 0, bindingPrimaryKeyColumns),
	)
	values := []interface{}{related.Name, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AppID = related.Name
	if o.R == nil {
		o.R = &bindingR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &applicationR{
			AppBindings: BindingSlice{o},
		}
	} else {
		related.R.AppBindings = append(related.R.AppBindings, o)
	}

	return nil
}

// Bindings retrieves all the records using an executor.
func Bindings(mods ...qm.QueryMod) bindingQuery {
	mods = append(mods, qm.From("`bindings`"))
	return bindingQuery{NewQuery(mods...)}
}

// FindBinding retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBinding(exec boil.Executor, iD uint, selectCols ...string) (*Binding, error) {
	bindingObj := &Binding{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bindings` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, bindingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bindings")
	}

	return bindingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Binding) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bindings provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bindingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bindingInsertCacheMut.RLock()
	cache, cached := bindingInsertCache[key]
	bindingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bindingAllColumns,
			bindingColumnsWithDefault,
			bindingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bindingType, bindingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bindingType, bindingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bindings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bindings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bindings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bindingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bindings")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bindingMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bindings")
	}

CacheNoHooks:
	if !cached {
		bindingInsertCacheMut.Lock()
		bindingInsertCache[key] = cache
		bindingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Binding.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Binding) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bindingUpdateCacheMut.RLock()
	cache, cached := bindingUpdateCache[key]
	bindingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bindingAllColumns,
			bindingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bindings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bindings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bindingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bindingType, bindingMapping, append(wl, bindingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bindings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bindings")
	}

	if !cached {
		bindingUpdateCacheMut.Lock()
		bindingUpdateCache[key] = cache
		bindingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bindingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bindings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bindings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BindingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bindings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bindingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in binding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all binding")
	}
	return rowsAff, nil
}

var mySQLBindingUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Binding) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bindings provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bindingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBindingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bindingUpsertCacheMut.RLock()
	cache, cached := bindingUpsertCache[key]
	bindingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bindingAllColumns,
			bindingColumnsWithDefault,
			bindingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bindingAllColumns,
			bindingPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert bindings, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "bindings", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bindings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bindingType, bindingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bindingType, bindingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bindings")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bindingMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bindingType, bindingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for bindings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bindings")
	}

CacheNoHooks:
	if !cached {
		bindingUpsertCacheMut.Lock()
		bindingUpsertCache[key] = cache
		bindingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Binding record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Binding) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Binding provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bindingPrimaryKeyMapping)
	sql := "DELETE FROM `bindings` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bindings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bindings")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bindingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bindingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bindings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bindings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BindingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bindingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bindings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bindingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from binding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bindings")
	}

	if len(bindingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Binding) Reload(exec boil.Executor) error {
	ret, err := FindBinding(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BindingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BindingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bindingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bindings`.* FROM `bindings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bindingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BindingSlice")
	}

	*o = slice

	return nil
}

// BindingExists checks if the Binding row exists.
func BindingExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bindings` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bindings exists")
	}

	return exists, nil
}
