// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBindings(t *testing.T) {
	t.Parallel()

	query := Bindings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBindingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBindingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bindings().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBindingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BindingSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBindingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BindingExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Binding exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BindingExists to return true, but got false.")
	}
}

func testBindingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bindingFound, err := FindBinding(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bindingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBindingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bindings().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testBindingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bindings().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBindingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bindingOne := &Binding{}
	bindingTwo := &Binding{}
	if err = randomize.Struct(seed, bindingOne, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}
	if err = randomize.Struct(seed, bindingTwo, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = bindingOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bindingTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bindings().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBindingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bindingOne := &Binding{}
	bindingTwo := &Binding{}
	if err = randomize.Struct(seed, bindingOne, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}
	if err = randomize.Struct(seed, bindingTwo, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = bindingOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bindingTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bindingBeforeInsertHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingAfterInsertHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingAfterSelectHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingBeforeUpdateHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingAfterUpdateHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingBeforeDeleteHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingAfterDeleteHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingBeforeUpsertHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func bindingAfterUpsertHook(e boil.Executor, o *Binding) error {
	*o = Binding{}
	return nil
}

func testBindingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Binding{}
	o := &Binding{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bindingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Binding object: %s", err)
	}

	AddBindingHook(boil.BeforeInsertHook, bindingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bindingBeforeInsertHooks = []BindingHook{}

	AddBindingHook(boil.AfterInsertHook, bindingAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bindingAfterInsertHooks = []BindingHook{}

	AddBindingHook(boil.AfterSelectHook, bindingAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bindingAfterSelectHooks = []BindingHook{}

	AddBindingHook(boil.BeforeUpdateHook, bindingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bindingBeforeUpdateHooks = []BindingHook{}

	AddBindingHook(boil.AfterUpdateHook, bindingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bindingAfterUpdateHooks = []BindingHook{}

	AddBindingHook(boil.BeforeDeleteHook, bindingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bindingBeforeDeleteHooks = []BindingHook{}

	AddBindingHook(boil.AfterDeleteHook, bindingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bindingAfterDeleteHooks = []BindingHook{}

	AddBindingHook(boil.BeforeUpsertHook, bindingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bindingBeforeUpsertHooks = []BindingHook{}

	AddBindingHook(boil.AfterUpsertHook, bindingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bindingAfterUpsertHooks = []BindingHook{}
}

func testBindingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBindingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(bindingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBindingToOneApplicationUsingApp(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Binding
	var foreign Application

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bindingDBTypes, false, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, applicationDBTypes, false, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AppID = foreign.Name
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.App().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Name != foreign.Name {
		t.Errorf("want: %v, got %v", foreign.Name, check.Name)
	}

	slice := BindingSlice{&local}
	if err = local.L.LoadApp(tx, false, (*[]*Binding)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.App = nil
	if err = local.L.LoadApp(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.App == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBindingToOneSetOpApplicationUsingApp(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Binding
	var b, c Application

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bindingDBTypes, false, strmangle.SetComplement(bindingPrimaryKeyColumns, bindingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, applicationDBTypes, false, strmangle.SetComplement(applicationPrimaryKeyColumns, applicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, applicationDBTypes, false, strmangle.SetComplement(applicationPrimaryKeyColumns, applicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Application{&b, &c} {
		err = a.SetApp(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.App != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AppBindings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AppID != x.Name {
			t.Error("foreign key was wrong value", a.AppID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AppID))
		reflect.Indirect(reflect.ValueOf(&a.AppID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AppID != x.Name {
			t.Error("foreign key was wrong value", a.AppID, x.Name)
		}
	}
}

func testBindingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBindingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BindingSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testBindingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bindings().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bindingDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `LoginType`: `varchar`, `IdentifyToken`: `varchar`, `Mail`: `varchar`, `Verified`: `tinyint`, `UserID`: `int`, `AppID`: `varchar`}
	_              = bytes.MinRead
)

func testBindingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bindingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bindingAllColumns) == len(bindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBindingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bindingAllColumns) == len(bindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Binding{}
	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bindingDBTypes, true, bindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bindingAllColumns, bindingPrimaryKeyColumns) {
		fields = bindingAllColumns
	} else {
		fields = strmangle.SetComplement(
			bindingAllColumns,
			bindingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BindingSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBindingsUpsert(t *testing.T) {
	t.Parallel()

	if len(bindingAllColumns) == len(bindingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBindingUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Binding{}
	if err = randomize.Struct(seed, &o, bindingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Binding: %s", err)
	}

	count, err := Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bindingDBTypes, false, bindingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Binding struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Binding: %s", err)
	}

	count, err = Bindings().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
