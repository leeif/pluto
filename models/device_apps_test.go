// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeviceApps(t *testing.T) {
	t.Parallel()

	query := DeviceApps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeviceAppsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceAppsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeviceApps().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceAppsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceAppSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceAppsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeviceAppExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeviceApp exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeviceAppExists to return true, but got false.")
	}
}

func testDeviceAppsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deviceAppFound, err := FindDeviceApp(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deviceAppFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeviceAppsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeviceApps().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeviceAppsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeviceApps().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeviceAppsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deviceAppOne := &DeviceApp{}
	deviceAppTwo := &DeviceApp{}
	if err = randomize.Struct(seed, deviceAppOne, deviceAppDBTypes, false, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceAppTwo, deviceAppDBTypes, false, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = deviceAppOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceAppTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeviceApps().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeviceAppsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deviceAppOne := &DeviceApp{}
	deviceAppTwo := &DeviceApp{}
	if err = randomize.Struct(seed, deviceAppOne, deviceAppDBTypes, false, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceAppTwo, deviceAppDBTypes, false, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = deviceAppOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceAppTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deviceAppBeforeInsertHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppAfterInsertHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppAfterSelectHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppBeforeUpdateHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppAfterUpdateHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppBeforeDeleteHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppAfterDeleteHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppBeforeUpsertHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func deviceAppAfterUpsertHook(e boil.Executor, o *DeviceApp) error {
	*o = DeviceApp{}
	return nil
}

func testDeviceAppsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &DeviceApp{}
	o := &DeviceApp{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deviceAppDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeviceApp object: %s", err)
	}

	AddDeviceAppHook(boil.BeforeInsertHook, deviceAppBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deviceAppBeforeInsertHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.AfterInsertHook, deviceAppAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deviceAppAfterInsertHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.AfterSelectHook, deviceAppAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deviceAppAfterSelectHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.BeforeUpdateHook, deviceAppBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deviceAppBeforeUpdateHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.AfterUpdateHook, deviceAppAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deviceAppAfterUpdateHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.BeforeDeleteHook, deviceAppBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deviceAppBeforeDeleteHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.AfterDeleteHook, deviceAppAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deviceAppAfterDeleteHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.BeforeUpsertHook, deviceAppBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deviceAppBeforeUpsertHooks = []DeviceAppHook{}

	AddDeviceAppHook(boil.AfterUpsertHook, deviceAppAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deviceAppAfterUpsertHooks = []DeviceAppHook{}
}

func testDeviceAppsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceAppsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(deviceAppColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceAppsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDeviceAppsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceAppSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDeviceAppsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeviceApps().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deviceAppDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `DeviceID`: `varchar`, `AppID`: `int`}
	_                = bytes.MinRead
)

func testDeviceAppsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deviceAppPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deviceAppAllColumns) == len(deviceAppPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeviceAppsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deviceAppAllColumns) == len(deviceAppPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeviceApp{}
	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceAppDBTypes, true, deviceAppPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deviceAppAllColumns, deviceAppPrimaryKeyColumns) {
		fields = deviceAppAllColumns
	} else {
		fields = strmangle.SetComplement(
			deviceAppAllColumns,
			deviceAppPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeviceAppSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeviceAppsUpsert(t *testing.T) {
	t.Parallel()

	if len(deviceAppAllColumns) == len(deviceAppPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeviceAppUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeviceApp{}
	if err = randomize.Struct(seed, &o, deviceAppDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeviceApp: %s", err)
	}

	count, err := DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deviceAppDBTypes, false, deviceAppPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceApp struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeviceApp: %s", err)
	}

	count, err = DeviceApps().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
