// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Migration is an object representing the database table.
type Migration struct {
	ID        uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *migrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L migrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MigrationColumns = struct {
	ID        string
	CreatedAt string
	Name      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	Name:      "name",
}

// Generated where

var MigrationWhere = struct {
	ID        whereHelperuint
	CreatedAt whereHelpernull_Time
	Name      whereHelperstring
}{
	ID:        whereHelperuint{field: "`migrations`.`id`"},
	CreatedAt: whereHelpernull_Time{field: "`migrations`.`created_at`"},
	Name:      whereHelperstring{field: "`migrations`.`name`"},
}

// MigrationRels is where relationship names are stored.
var MigrationRels = struct {
}{}

// migrationR is where relationships are stored.
type migrationR struct {
}

// NewStruct creates a new relationship struct
func (*migrationR) NewStruct() *migrationR {
	return &migrationR{}
}

// migrationL is where Load methods for each relationship are stored.
type migrationL struct{}

var (
	migrationAllColumns            = []string{"id", "created_at", "name"}
	migrationColumnsWithoutDefault = []string{"created_at", "name"}
	migrationColumnsWithDefault    = []string{"id"}
	migrationPrimaryKeyColumns     = []string{"id"}
)

type (
	// MigrationSlice is an alias for a slice of pointers to Migration.
	// This should generally be used opposed to []Migration.
	MigrationSlice []*Migration
	// MigrationHook is the signature for custom Migration hook methods
	MigrationHook func(boil.Executor, *Migration) error

	migrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	migrationType                 = reflect.TypeOf(&Migration{})
	migrationMapping              = queries.MakeStructMapping(migrationType)
	migrationPrimaryKeyMapping, _ = queries.BindMapping(migrationType, migrationMapping, migrationPrimaryKeyColumns)
	migrationInsertCacheMut       sync.RWMutex
	migrationInsertCache          = make(map[string]insertCache)
	migrationUpdateCacheMut       sync.RWMutex
	migrationUpdateCache          = make(map[string]updateCache)
	migrationUpsertCacheMut       sync.RWMutex
	migrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var migrationBeforeInsertHooks []MigrationHook
var migrationBeforeUpdateHooks []MigrationHook
var migrationBeforeDeleteHooks []MigrationHook
var migrationBeforeUpsertHooks []MigrationHook

var migrationAfterInsertHooks []MigrationHook
var migrationAfterSelectHooks []MigrationHook
var migrationAfterUpdateHooks []MigrationHook
var migrationAfterDeleteHooks []MigrationHook
var migrationAfterUpsertHooks []MigrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Migration) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Migration) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Migration) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Migration) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Migration) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Migration) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Migration) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Migration) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Migration) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range migrationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMigrationHook registers your hook function for all future operations.
func AddMigrationHook(hookPoint boil.HookPoint, migrationHook MigrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		migrationBeforeInsertHooks = append(migrationBeforeInsertHooks, migrationHook)
	case boil.BeforeUpdateHook:
		migrationBeforeUpdateHooks = append(migrationBeforeUpdateHooks, migrationHook)
	case boil.BeforeDeleteHook:
		migrationBeforeDeleteHooks = append(migrationBeforeDeleteHooks, migrationHook)
	case boil.BeforeUpsertHook:
		migrationBeforeUpsertHooks = append(migrationBeforeUpsertHooks, migrationHook)
	case boil.AfterInsertHook:
		migrationAfterInsertHooks = append(migrationAfterInsertHooks, migrationHook)
	case boil.AfterSelectHook:
		migrationAfterSelectHooks = append(migrationAfterSelectHooks, migrationHook)
	case boil.AfterUpdateHook:
		migrationAfterUpdateHooks = append(migrationAfterUpdateHooks, migrationHook)
	case boil.AfterDeleteHook:
		migrationAfterDeleteHooks = append(migrationAfterDeleteHooks, migrationHook)
	case boil.AfterUpsertHook:
		migrationAfterUpsertHooks = append(migrationAfterUpsertHooks, migrationHook)
	}
}

// One returns a single migration record from the query.
func (q migrationQuery) One(exec boil.Executor) (*Migration, error) {
	o := &Migration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for migrations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Migration records from the query.
func (q migrationQuery) All(exec boil.Executor) (MigrationSlice, error) {
	var o []*Migration

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Migration slice")
	}

	if len(migrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Migration records in the query.
func (q migrationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count migrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q migrationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if migrations exists")
	}

	return count > 0, nil
}

// Migrations retrieves all the records using an executor.
func Migrations(mods ...qm.QueryMod) migrationQuery {
	mods = append(mods, qm.From("`migrations`"))
	return migrationQuery{NewQuery(mods...)}
}

// FindMigration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMigration(exec boil.Executor, iD uint, selectCols ...string) (*Migration, error) {
	migrationObj := &Migration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `migrations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, migrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from migrations")
	}

	return migrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Migration) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no migrations provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(migrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	migrationInsertCacheMut.RLock()
	cache, cached := migrationInsertCache[key]
	migrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			migrationAllColumns,
			migrationColumnsWithDefault,
			migrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(migrationType, migrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(migrationType, migrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `migrations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `migrations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `migrations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, migrationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into migrations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == migrationMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for migrations")
	}

CacheNoHooks:
	if !cached {
		migrationInsertCacheMut.Lock()
		migrationInsertCache[key] = cache
		migrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Migration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Migration) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	migrationUpdateCacheMut.RLock()
	cache, cached := migrationUpdateCache[key]
	migrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			migrationAllColumns,
			migrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update migrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `migrations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, migrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(migrationType, migrationMapping, append(wl, migrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update migrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for migrations")
	}

	if !cached {
		migrationUpdateCacheMut.Lock()
		migrationUpdateCache[key] = cache
		migrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q migrationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for migrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MigrationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `migrations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, migrationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in migration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all migration")
	}
	return rowsAff, nil
}

var mySQLMigrationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Migration) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no migrations provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(migrationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMigrationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	migrationUpsertCacheMut.RLock()
	cache, cached := migrationUpsertCache[key]
	migrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			migrationAllColumns,
			migrationColumnsWithDefault,
			migrationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			migrationAllColumns,
			migrationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert migrations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "migrations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `migrations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(migrationType, migrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(migrationType, migrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for migrations")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == migrationMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(migrationType, migrationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for migrations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for migrations")
	}

CacheNoHooks:
	if !cached {
		migrationUpsertCacheMut.Lock()
		migrationUpsertCache[key] = cache
		migrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Migration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Migration) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Migration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), migrationPrimaryKeyMapping)
	sql := "DELETE FROM `migrations` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for migrations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q migrationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no migrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for migrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MigrationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(migrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `migrations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, migrationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from migration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for migrations")
	}

	if len(migrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Migration) Reload(exec boil.Executor) error {
	ret, err := FindMigration(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MigrationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MigrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `migrations`.* FROM `migrations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, migrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MigrationSlice")
	}

	*o = slice

	return nil
}

// MigrationExists checks if the Migration row exists.
func MigrationExists(exec boil.Executor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `migrations` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if migrations exists")
	}

	return exists, nil
}
