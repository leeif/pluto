// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOauthClients(t *testing.T) {
	t.Parallel()

	query := OauthClients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOauthClientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOauthClientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OauthClients().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOauthClientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OauthClientSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOauthClientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OauthClientExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OauthClient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OauthClientExists to return true, but got false.")
	}
}

func testOauthClientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	oauthClientFound, err := FindOauthClient(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if oauthClientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOauthClientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OauthClients().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testOauthClientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OauthClients().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOauthClientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	oauthClientOne := &OauthClient{}
	oauthClientTwo := &OauthClient{}
	if err = randomize.Struct(seed, oauthClientOne, oauthClientDBTypes, false, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}
	if err = randomize.Struct(seed, oauthClientTwo, oauthClientDBTypes, false, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = oauthClientOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = oauthClientTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OauthClients().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOauthClientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	oauthClientOne := &OauthClient{}
	oauthClientTwo := &OauthClient{}
	if err = randomize.Struct(seed, oauthClientOne, oauthClientDBTypes, false, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}
	if err = randomize.Struct(seed, oauthClientTwo, oauthClientDBTypes, false, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = oauthClientOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = oauthClientTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func oauthClientBeforeInsertHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientAfterInsertHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientAfterSelectHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientBeforeUpdateHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientAfterUpdateHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientBeforeDeleteHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientAfterDeleteHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientBeforeUpsertHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func oauthClientAfterUpsertHook(e boil.Executor, o *OauthClient) error {
	*o = OauthClient{}
	return nil
}

func testOauthClientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &OauthClient{}
	o := &OauthClient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, oauthClientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OauthClient object: %s", err)
	}

	AddOauthClientHook(boil.BeforeInsertHook, oauthClientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	oauthClientBeforeInsertHooks = []OauthClientHook{}

	AddOauthClientHook(boil.AfterInsertHook, oauthClientAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	oauthClientAfterInsertHooks = []OauthClientHook{}

	AddOauthClientHook(boil.AfterSelectHook, oauthClientAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	oauthClientAfterSelectHooks = []OauthClientHook{}

	AddOauthClientHook(boil.BeforeUpdateHook, oauthClientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	oauthClientBeforeUpdateHooks = []OauthClientHook{}

	AddOauthClientHook(boil.AfterUpdateHook, oauthClientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	oauthClientAfterUpdateHooks = []OauthClientHook{}

	AddOauthClientHook(boil.BeforeDeleteHook, oauthClientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	oauthClientBeforeDeleteHooks = []OauthClientHook{}

	AddOauthClientHook(boil.AfterDeleteHook, oauthClientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	oauthClientAfterDeleteHooks = []OauthClientHook{}

	AddOauthClientHook(boil.BeforeUpsertHook, oauthClientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	oauthClientBeforeUpsertHooks = []OauthClientHook{}

	AddOauthClientHook(boil.AfterUpsertHook, oauthClientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	oauthClientAfterUpsertHooks = []OauthClientHook{}
}

func testOauthClientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOauthClientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(oauthClientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOauthClientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOauthClientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OauthClientSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testOauthClientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OauthClients().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	oauthClientDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `Key`: `varchar`, `Secret`: `varchar`, `Status`: `varchar`, `UserID`: `int`, `RedirectURI`: `varchar`}
	_                  = bytes.MinRead
)

func testOauthClientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(oauthClientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(oauthClientAllColumns) == len(oauthClientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOauthClientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(oauthClientAllColumns) == len(oauthClientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OauthClient{}
	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, oauthClientDBTypes, true, oauthClientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(oauthClientAllColumns, oauthClientPrimaryKeyColumns) {
		fields = oauthClientAllColumns
	} else {
		fields = strmangle.SetComplement(
			oauthClientAllColumns,
			oauthClientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OauthClientSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOauthClientsUpsert(t *testing.T) {
	t.Parallel()

	if len(oauthClientAllColumns) == len(oauthClientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOauthClientUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OauthClient{}
	if err = randomize.Struct(seed, &o, oauthClientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OauthClient: %s", err)
	}

	count, err := OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, oauthClientDBTypes, false, oauthClientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OauthClient struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OauthClient: %s", err)
	}

	count, err = OauthClients().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
