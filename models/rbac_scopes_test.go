// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRbacScopes(t *testing.T) {
	t.Parallel()

	query := RbacScopes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRbacScopesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRbacScopesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RbacScopes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRbacScopesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RbacScopeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRbacScopesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RbacScopeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RbacScope exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RbacScopeExists to return true, but got false.")
	}
}

func testRbacScopesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rbacScopeFound, err := FindRbacScope(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rbacScopeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRbacScopesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RbacScopes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testRbacScopesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RbacScopes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRbacScopesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rbacScopeOne := &RbacScope{}
	rbacScopeTwo := &RbacScope{}
	if err = randomize.Struct(seed, rbacScopeOne, rbacScopeDBTypes, false, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}
	if err = randomize.Struct(seed, rbacScopeTwo, rbacScopeDBTypes, false, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = rbacScopeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rbacScopeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RbacScopes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRbacScopesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rbacScopeOne := &RbacScope{}
	rbacScopeTwo := &RbacScope{}
	if err = randomize.Struct(seed, rbacScopeOne, rbacScopeDBTypes, false, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}
	if err = randomize.Struct(seed, rbacScopeTwo, rbacScopeDBTypes, false, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = rbacScopeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rbacScopeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rbacScopeBeforeInsertHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeAfterInsertHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeAfterSelectHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeBeforeUpdateHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeAfterUpdateHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeBeforeDeleteHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeAfterDeleteHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeBeforeUpsertHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func rbacScopeAfterUpsertHook(e boil.Executor, o *RbacScope) error {
	*o = RbacScope{}
	return nil
}

func testRbacScopesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &RbacScope{}
	o := &RbacScope{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RbacScope object: %s", err)
	}

	AddRbacScopeHook(boil.BeforeInsertHook, rbacScopeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rbacScopeBeforeInsertHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.AfterInsertHook, rbacScopeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rbacScopeAfterInsertHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.AfterSelectHook, rbacScopeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rbacScopeAfterSelectHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.BeforeUpdateHook, rbacScopeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rbacScopeBeforeUpdateHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.AfterUpdateHook, rbacScopeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rbacScopeAfterUpdateHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.BeforeDeleteHook, rbacScopeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rbacScopeBeforeDeleteHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.AfterDeleteHook, rbacScopeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rbacScopeAfterDeleteHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.BeforeUpsertHook, rbacScopeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rbacScopeBeforeUpsertHooks = []RbacScopeHook{}

	AddRbacScopeHook(boil.AfterUpsertHook, rbacScopeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rbacScopeAfterUpsertHooks = []RbacScopeHook{}
}

func testRbacScopesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRbacScopesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(rbacScopeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRbacScopesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRbacScopesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RbacScopeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testRbacScopesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RbacScopes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rbacScopeDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `Name`: `varchar`, `AppID`: `int`}
	_                = bytes.MinRead
)

func testRbacScopesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rbacScopePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rbacScopeAllColumns) == len(rbacScopePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRbacScopesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rbacScopeAllColumns) == len(rbacScopePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RbacScope{}
	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rbacScopeDBTypes, true, rbacScopePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rbacScopeAllColumns, rbacScopePrimaryKeyColumns) {
		fields = rbacScopeAllColumns
	} else {
		fields = strmangle.SetComplement(
			rbacScopeAllColumns,
			rbacScopePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RbacScopeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRbacScopesUpsert(t *testing.T) {
	t.Parallel()

	if len(rbacScopeAllColumns) == len(rbacScopePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRbacScopeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RbacScope{}
	if err = randomize.Struct(seed, &o, rbacScopeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RbacScope: %s", err)
	}

	count, err := RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rbacScopeDBTypes, false, rbacScopePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RbacScope struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RbacScope: %s", err)
	}

	count, err = RbacScopes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
