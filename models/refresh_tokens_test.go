// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRefreshTokens(t *testing.T) {
	t.Parallel()

	query := RefreshTokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRefreshTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRefreshTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RefreshTokens().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRefreshTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RefreshTokenSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRefreshTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RefreshTokenExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RefreshToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RefreshTokenExists to return true, but got false.")
	}
}

func testRefreshTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	refreshTokenFound, err := FindRefreshToken(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if refreshTokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRefreshTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RefreshTokens().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testRefreshTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RefreshTokens().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRefreshTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	refreshTokenOne := &RefreshToken{}
	refreshTokenTwo := &RefreshToken{}
	if err = randomize.Struct(seed, refreshTokenOne, refreshTokenDBTypes, false, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}
	if err = randomize.Struct(seed, refreshTokenTwo, refreshTokenDBTypes, false, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = refreshTokenOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = refreshTokenTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RefreshTokens().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRefreshTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	refreshTokenOne := &RefreshToken{}
	refreshTokenTwo := &RefreshToken{}
	if err = randomize.Struct(seed, refreshTokenOne, refreshTokenDBTypes, false, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}
	if err = randomize.Struct(seed, refreshTokenTwo, refreshTokenDBTypes, false, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = refreshTokenOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = refreshTokenTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func refreshTokenBeforeInsertHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenAfterInsertHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenAfterSelectHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenBeforeUpdateHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenAfterUpdateHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenBeforeDeleteHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenAfterDeleteHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenBeforeUpsertHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func refreshTokenAfterUpsertHook(e boil.Executor, o *RefreshToken) error {
	*o = RefreshToken{}
	return nil
}

func testRefreshTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &RefreshToken{}
	o := &RefreshToken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RefreshToken object: %s", err)
	}

	AddRefreshTokenHook(boil.BeforeInsertHook, refreshTokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	refreshTokenBeforeInsertHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.AfterInsertHook, refreshTokenAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	refreshTokenAfterInsertHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.AfterSelectHook, refreshTokenAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	refreshTokenAfterSelectHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.BeforeUpdateHook, refreshTokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	refreshTokenBeforeUpdateHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.AfterUpdateHook, refreshTokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	refreshTokenAfterUpdateHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.BeforeDeleteHook, refreshTokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	refreshTokenBeforeDeleteHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.AfterDeleteHook, refreshTokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	refreshTokenAfterDeleteHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.BeforeUpsertHook, refreshTokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	refreshTokenBeforeUpsertHooks = []RefreshTokenHook{}

	AddRefreshTokenHook(boil.AfterUpsertHook, refreshTokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	refreshTokenAfterUpsertHooks = []RefreshTokenHook{}
}

func testRefreshTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRefreshTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(refreshTokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRefreshTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRefreshTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RefreshTokenSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testRefreshTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RefreshTokens().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	refreshTokenDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `UserID`: `int`, `RefreshToken`: `varchar`, `ExpireAt`: `timestamp`, `DeviceAppID`: `int`, `Scopes`: `varchar`}
	_                   = bytes.MinRead
)

func testRefreshTokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(refreshTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(refreshTokenAllColumns) == len(refreshTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRefreshTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(refreshTokenAllColumns) == len(refreshTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RefreshToken{}
	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, refreshTokenDBTypes, true, refreshTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(refreshTokenAllColumns, refreshTokenPrimaryKeyColumns) {
		fields = refreshTokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			refreshTokenAllColumns,
			refreshTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RefreshTokenSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRefreshTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(refreshTokenAllColumns) == len(refreshTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRefreshTokenUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RefreshToken{}
	if err = randomize.Struct(seed, &o, refreshTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RefreshToken: %s", err)
	}

	count, err := RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, refreshTokenDBTypes, false, refreshTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RefreshToken struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RefreshToken: %s", err)
	}

	count, err = RefreshTokens().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
